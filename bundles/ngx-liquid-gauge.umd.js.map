{"version":3,"file":"ngx-liquid-gauge.umd.js.map","sources":["ng://ngx-liquid-gauge/lib/ngx-liquid-gauge.service.ts","ng://ngx-liquid-gauge/lib/liquidFillGauge.ts","ng://ngx-liquid-gauge/lib/ngx-liquid-gauge.component.ts","ng://ngx-liquid-gauge/lib/ngx-liquid-gauge.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxLiquidGaugeService {\r\n\r\n  constructor() { }\r\n}\r\n","/*!\r\n* Note this was taken from Curtis Bratton's code: http://bl.ocks.org/brattonc/5e5ce9beee483220e2f6\r\n* I upgraded the D3 API and made minor modifications along the way as I converted it to Typescript from Javascript.\r\n* All credits go to Curtis.\r\n* Dayo Adetoye. 2018. https://github.com/adedayo\r\n*/\r\n\r\n\r\nimport * as d3 from 'd3';\r\n\r\n/*!\r\n * @license Open source under BSD 2-clause (http://choosealicense.com/licenses/bsd-2-clause/)\r\n * Copyright (c) 2015, Curtis Bratton\r\n * All rights reserved.\r\n *\r\n * Liquid Fill Gauge v1.1\r\n */\r\nexport function liquidFillGaugeDefaultSettings() {\r\n  return {\r\n    minValue: 0, // The gauge minimum value.\r\n    maxValue: 100, // The gauge maximum value.\r\n    circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.\r\n    circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.\r\n    circleColor: '#178BCA', // The color of the outer circle.\r\n    waveHeight: 0.05, // The wave height as a percentage of the radius of the wave circle.\r\n    waveCount: 1, // The number of full waves per width of the wave circle.\r\n    waveRiseTime: 1000, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.\r\n    waveAnimateTime: 18000, // The amount of time in milliseconds for a full wave to enter the wave circle.\r\n    waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.\r\n    // tslint:disable-next-line:max-line-length\r\n    waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.\r\n    waveAnimate: true, // Controls if the wave scrolls or is static.\r\n    waveColor: '#178BCA', // The color of the fill wave.\r\n    waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.\r\n    textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.\r\n    textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%\r\n    // tslint:disable-next-line:max-line-length\r\n    valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.\r\n    displayPercent: true, // If true, a % symbol is displayed after the value.\r\n\r\n    textColor: '#045681', // The color of the value text when the wave does not overlap it.\r\n    waveTextColor: '#A4DBf8' // The color of the value text when the wave overlaps it.\r\n  };\r\n}\r\n\r\nexport function loadLiquidFillGauge(elementId, value, config) {\r\n  if (config == null) {\r\n    config = liquidFillGaugeDefaultSettings();\r\n  }\r\n  const gauge = d3.select('#' + elementId);\r\n  const radius = Math.min(parseInt(gauge.style('width'), 10), parseInt(gauge.style('height'), 10)) / 2;\r\n  const locationX = parseInt(gauge.style('width'), 10) / 2 - radius;\r\n  const locationY = parseInt(gauge.style('height'), 10) / 2 - radius;\r\n  let fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n\r\n  let waveHeightScale;\r\n  if (config.waveHeightScaling) {\r\n    waveHeightScale = d3.scaleLinear()\r\n      .range([0, config.waveHeight, 0])\r\n      .domain([0, 50, 100]);\r\n  } else {\r\n    waveHeightScale = d3.scaleLinear()\r\n      .range([config.waveHeight, config.waveHeight])\r\n      .domain([0, 100]);\r\n  }\r\n\r\n  const textPixels = (config.textSize * radius / 2);\r\n  const textFinalValue = parseFloat(value).toFixed(2);\r\n  const textStartValue = config.valueCountUp ? config.minValue : textFinalValue;\r\n  const percentText = config.displayPercent ? '%' : '';\r\n  const circleThickness = config.circleThickness * radius;\r\n  const circleFillGap = config.circleFillGap * radius;\r\n  const fillCircleMargin = circleThickness + circleFillGap;\r\n  const fillCircleRadius = radius - fillCircleMargin;\r\n  let waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n\r\n  const waveLength = fillCircleRadius * 2 / config.waveCount;\r\n  const waveClipCount = 1 + config.waveCount;\r\n  const waveClipWidth = waveLength * waveClipCount;\r\n\r\n  // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.\r\n  let textRounder = function (val) {\r\n    return '' + Math.round(val);\r\n  };\r\n  if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n    textRounder = function (val) {\r\n      return parseFloat(val).toFixed(1);\r\n    };\r\n  }\r\n  if (parseFloat(textFinalValue) !== parseFloat(textRounder(textFinalValue))) {\r\n    textRounder = function (val) {\r\n      return parseFloat(val).toFixed(2);\r\n    };\r\n  }\r\n\r\n  // Data for building the clip wave area.\r\n  const data = [];\r\n  for (let i = 0; i <= 40 * waveClipCount; i++) {\r\n    data.push({\r\n      x: i / (40 * waveClipCount),\r\n      y: (i / (40))\r\n    });\r\n  }\r\n\r\n  // Scales for drawing the outer circle.\r\n  const gaugeCircleX = d3.scaleLinear().range([0, 2 * Math.PI]).domain([0, 1]);\r\n  const gaugeCircleY = d3.scaleLinear().range([0, radius]).domain([0, radius]);\r\n\r\n  // Scales for controlling the size of the clipping path.\r\n  let waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n  let waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n\r\n  // Scales for controlling the position of the clipping path.\r\n  let waveRiseScale = d3.scaleLinear()\r\n    // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n    // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n    // circle at 100%.\r\n    .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n    .domain([0, 1]);\r\n  const waveAnimateScale = d3.scaleLinear()\r\n    .range([0, waveClipWidth - fillCircleRadius * 2]) // Push the clip area one full wave then snap back.\r\n    .domain([0, 1]);\r\n\r\n  // Scale for controlling the position of the text within the gauge.\r\n  const textRiseScaleY = d3.scaleLinear()\r\n    .range([fillCircleMargin + fillCircleRadius * 2, (fillCircleMargin + textPixels * 0.7)])\r\n    .domain([0, 1]);\r\n\r\n  // Center the gauge within the parent SVG.\r\n  const gaugeGroup = gauge.append('g')\r\n    .attr('transform', 'translate(' + locationX + ',' + locationY + ')');\r\n\r\n  // Draw the outer Rectangle.\r\n  var rectpoints = [{x: 0, y: 0}, {x: 0, y: parseInt(gauge.style('height'))}, {x: parseInt(gauge.style('width'), 10), y: parseInt(gauge.style('height'))}, {x: parseInt(gauge.style('width'), 10), y: 0}, {x: 0, y: 0}];\r\n  var lineFunc = d3.line()\r\n      .x(function(d) { return d.x })\r\n      .y(function(d) { return d.y });\r\n  gaugeGroup.append('path')\r\n    .attr('d', lineFunc(rectpoints))\r\n    .attr('stroke', config.circleColor)\r\n    .attr('stroke-width', circleThickness)\r\n    .attr('fill', 'none');\r\n\r\n  // Text where the wave does not overlap.\r\n  const text1 = gaugeGroup.append('text')\r\n    .text(textRounder(textStartValue) + percentText)\r\n    .attr('class', 'liquidFillGaugeText')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('font-size', textPixels + 'px')\r\n    .style('fill', config.textColor)\r\n    .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n\r\n  // The clipping wave area.\r\n  const clipArea = d3.area()\r\n    .x(function (d: any) {\r\n      return waveScaleX(d.x);\r\n    })\r\n    .y0(function (d: any) {\r\n      return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI));\r\n    })\r\n    .y1(function (d) {\r\n      return (fillCircleRadius * 2 + waveHeight);\r\n    });\r\n  const waveGroup = gaugeGroup.append('defs')\r\n    .append('clipPath')\r\n    .attr('id', 'clipWave' + elementId);\r\n  const wave = waveGroup.append('path')\r\n    .datum(data)\r\n    .attr('d', clipArea)\r\n    .attr('T', 0);\r\n\r\n  // The inner circle with the clipping wave attached.\r\n  const fillCircleGroup = gaugeGroup.append('g')\r\n    .attr('clip-path', 'url(#clipWave' + elementId + ')');\r\n  fillCircleGroup.append('rect')\r\n        .attr('x', (radius) - fillCircleRadius)\r\n        .attr('y', radius - fillCircleRadius)\r\n        .attr('width', fillCircleRadius*2)\r\n        .attr('height', fillCircleRadius*2)\r\n        .style('fill', config.waveColor);\r\n\r\n  // Text where the wave does overlap.\r\n  const text2 = fillCircleGroup.append('text')\r\n    .text(textRounder(textStartValue) + percentText)\r\n    .attr('class', 'liquidFillGaugeText')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('font-size', textPixels + 'px')\r\n    .style('fill', config.waveTextColor)\r\n    .attr('transform', 'translate(' + radius + ',' + textRiseScaleY(config.textVertPosition) + ')');\r\n\r\n  // Make the value count up.\r\n  if (config.valueCountUp) {\r\n    const textTween = function g() {\r\n      const i = d3.interpolate(this.textContent, textFinalValue);\r\n      return (t) => {\r\n        this.textContent = textRounder(i(t)) + percentText;\r\n      };\r\n    };\r\n    text1.transition()\r\n      .duration(config.waveRiseTime)\r\n      .tween('text', textTween);\r\n    text2.transition()\r\n      .duration(config.waveRiseTime)\r\n      .tween('text', textTween);\r\n  }\r\n\r\n  // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.\r\n  const waveGroupXPosition = fillCircleMargin + fillCircleRadius * 2 - waveClipWidth;\r\n  if (config.waveRise) {\r\n\r\n    waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(0) + ')')\r\n      .transition()\r\n      .duration(config.waveRiseTime)\r\n      .attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')')\r\n      .on('start', () => {\r\n        wave.attr('transform', 'translate(1,0)');\r\n      }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and\r\n    // waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.\r\n  } else {\r\n    waveGroup.attr('transform', 'translate(' + waveGroupXPosition + ',' + waveRiseScale(fillPercent) + ')');\r\n  }\r\n\r\n  if (config.waveAnimate) {\r\n    animateWave();\r\n  }\r\n\r\n  function animateWave(_?: any) {\r\n    wave.attr('transform', 'translate(' + waveAnimateScale(+wave.attr('T')) + ',0)');\r\n    wave.transition()\r\n      .duration(config.waveAnimateTime * (1 - +wave.attr('T')))\r\n      .ease(d3.easeLinear)\r\n      .attr('transform', 'translate(' + waveAnimateScale(1) + ',0)')\r\n      .attr('T', 1)\r\n      .on('end', () => {\r\n        wave.attr('T', 0);\r\n        animateWave(config.waveAnimateTime);\r\n      });\r\n  }\r\n\r\n  function GaugeUpdater() {\r\n    this.update = function (val) {\r\n      const newFinalValue = parseFloat(val).toFixed(2);\r\n      let textRounderUpdater = function (val2) {\r\n        return '' + Math.round(val2);\r\n      };\r\n      if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n        textRounderUpdater = function (val2) {\r\n          return parseFloat(val2).toFixed(1);\r\n        };\r\n      }\r\n      if (parseFloat(newFinalValue) !== parseFloat(textRounderUpdater(newFinalValue))) {\r\n        textRounderUpdater = function (val2) {\r\n          return parseFloat(val2).toFixed(2);\r\n        };\r\n      }\r\n\r\n      const textTween = () => {\r\n        const i = d3.interpolate(this.textContent, parseFloat(value).toFixed(2));\r\n        return function (t) {\r\n          this.textContent = textRounderUpdater(i(t)) + percentText;\r\n        };\r\n      };\r\n\r\n      text1.transition()\r\n        .duration(config.waveRiseTime)\r\n        .tween('text', textTween);\r\n      text2.transition()\r\n        .duration(config.waveRiseTime)\r\n        .tween('text', textTween);\r\n\r\n      fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value)) / config.maxValue;\r\n      waveHeight = fillCircleRadius * waveHeightScale(fillPercent * 100);\r\n      waveRiseScale = d3.scaleLinear()\r\n        // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave\r\n        // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill\r\n        // circle at 100%.\r\n        .range([(fillCircleMargin + fillCircleRadius * 2 + waveHeight), (fillCircleMargin - waveHeight)])\r\n        .domain([0, 1]);\r\n      const newHeight = waveRiseScale(fillPercent);\r\n      waveScaleX = d3.scaleLinear().range([0, waveClipWidth]).domain([0, 1]);\r\n      waveScaleY = d3.scaleLinear().range([0, waveHeight]).domain([0, 1]);\r\n      let newClipArea;\r\n      if (config.waveHeightScaling) {\r\n        newClipArea = d3.area()\r\n          .x((d: any) => {\r\n            return waveScaleX(d.x);\r\n          })\r\n          .y0((d: any) => {\r\n            return waveScaleY(Math.sin(Math.PI * 2 * config.waveOffset * -1 + Math.PI * 2 * (1 - config.waveCount) + d.y * 2 * Math.PI));\r\n          })\r\n          .y1((d) => {\r\n            return (fillCircleRadius * 2 + waveHeight);\r\n          });\r\n      } else {\r\n        newClipArea = clipArea;\r\n      }\r\n\r\n      const newWavePosition = config.waveAnimate ? waveAnimateScale(1) : 0;\r\n      wave.transition()\r\n        .duration(0)\r\n        .transition()\r\n        .duration(config.waveAnimate ? (config.waveAnimateTime * (1 - +wave.attr('T'))) : (config.waveRiseTime))\r\n        .ease(d3.easeLinear)\r\n        .attr('d', newClipArea)\r\n        .attr('transform', 'translate(' + newWavePosition + ',0)')\r\n        .attr('T', '1')\r\n        .on('start', () => {\r\n          if (config.waveAnimate) {\r\n            wave.attr('transform', 'translate(' + waveAnimateScale(0) + ',0)');\r\n            animateWave(config.waveAnimateTime);\r\n          }\r\n        });\r\n      waveGroup.transition()\r\n        .duration(config.waveRiseTime)\r\n        .attr('transform', 'translate(' + waveGroupXPosition + ',' + newHeight + ')');\r\n    };\r\n  }\r\n\r\n  return new GaugeUpdater();\r\n}\r\n","import { Component, OnInit, ViewChild, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport * as d3 from 'd3';\r\nimport * as liquid from './liquidFillGauge';\r\n\r\n@Component({\r\n  selector: 'lib-ngx-liquid-gauge',\r\n  template: `<div #gauge></div>`,\r\n  styles: []\r\n})\r\nexport class NgxLiquidGaugeComponent implements OnInit, OnChanges {\r\n\r\n  @ViewChild('gauge') gauge: any;\r\n  id = 'gauge' + Math.floor(Math.random() * 100000) + 1; // assign a random ID to SVG component\r\n  private defaultSettings = liquid.liquidFillGaugeDefaultSettings();\r\n  @Input() private value = 0;\r\n  @Input() private minValue = this.defaultSettings.minValue;\r\n  @Input() private maxValue = this.defaultSettings.maxValue;\r\n  @Input() private circleThickness = this.defaultSettings.circleThickness;\r\n  @Input() private circleFillGap = this.defaultSettings.circleFillGap;\r\n  @Input() private circleColor = this.defaultSettings.circleColor;\r\n  @Input() private waveHeight = this.defaultSettings.waveHeight;\r\n  @Input() private waveCount = this.defaultSettings.waveCount;\r\n  @Input() private waveRiseTime = this.defaultSettings.waveRiseTime;\r\n  @Input() private waveAnimateTime = this.defaultSettings.waveAnimateTime;\r\n  @Input() private waveRise = this.defaultSettings.waveRise;\r\n  @Input() private waveHeightScaling = this.defaultSettings.waveHeightScaling;\r\n  @Input() private waveAnimate = this.defaultSettings.waveAnimate;\r\n  @Input() private waveColor = this.defaultSettings.waveColor;\r\n  @Input() private waveOffset = this.defaultSettings.waveOffset;\r\n  @Input() private textVertPosition = this.defaultSettings.textVertPosition;\r\n  @Input() private textSize = this.defaultSettings.textSize;\r\n  @Input() private valueCountUp = this.defaultSettings.valueCountUp;\r\n  @Input() private displayPercent = this.defaultSettings.displayPercent;\r\n  @Input() private textColor = this.defaultSettings.textColor;\r\n  @Input() private waveTextColor = this.defaultSettings.waveTextColor;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.createChart();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.createChart();\r\n  }\r\n\r\n  createChart(): any {\r\n    const element: Element = this.gauge.nativeElement;\r\n    //clear previous chart\r\n    d3.select(element).selectAll('*').remove();\r\n\r\n    d3.select(element)\r\n      .append('svg').attr('id', this.id)\r\n      .attr('width', '150')\r\n      .attr('height', '150');\r\n    const settings = {\r\n      minValue: this.minValue,\r\n      maxValue: this.maxValue,\r\n      circleThickness: this.circleThickness,\r\n      circleFillGap: this.circleFillGap,\r\n      circleColor: this.circleColor,\r\n      waveHeight: this.waveHeight,\r\n      waveCount: this.waveCount,\r\n      waveRiseTime: this.waveRiseTime,\r\n      waveAnimateTime: this.waveAnimateTime,\r\n      waveRise: this.waveRise,\r\n      waveHeightScaling: this.waveHeightScaling,\r\n      waveAnimate: this.waveAnimate,\r\n      waveColor: this.waveColor,\r\n      waveOffset: this.waveOffset,\r\n      textVertPosition: this.textVertPosition,\r\n      textSize: this.textSize,\r\n      valueCountUp: this.valueCountUp,\r\n      displayPercent: this.displayPercent,\r\n      textColor: this.textColor,\r\n      waveTextColor: this.waveTextColor,\r\n    };\r\n    liquid.loadLiquidFillGauge(this.id, this.value, settings);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxLiquidGaugeComponent } from './ngx-liquid-gauge.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [NgxLiquidGaugeComponent],\r\n  exports: [NgxLiquidGaugeComponent]\r\n})\r\nexport class NgxLiquidGaugeModule { }\r\n"],"names":["Injectable","d3.select","d3.scaleLinear","d3.line","d3.area","d3.interpolate","d3.easeLinear","liquid.liquidFillGaugeDefaultSettings","liquid.loadLiquidFillGauge","Component","ViewChild","Input","NgModule"],"mappings":"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"}
